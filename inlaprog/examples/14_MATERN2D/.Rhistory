xx = scan("matern-sample.dat")
plot(as.matrix(xx,100,100))
my.display.matrix(as.matrix(xx,100,100))
length(xx)
my.display.matrix(matrix(xx,100,100))
hist(xx)
yy = rpois(exp(xx))
yy = rpois(lambda = exp(xx))
yy = rpois(lambda = exp(xx),n=length(xx))
plot(yy)
my.display.matrix(matrix(yy,100,100))
hist(yy)
?write
n=length(xx)
write(t(cbind(0:(n-1),1,yy)), file="poisson-data.dat",ncol=3)
yy = rnorm(mean = xx, sd = 0.1 ,n=length(xx))
my.display.matrix(matrix(yy,100,100))
sum((yy-xx)^2)/n
(sum((yy-xx)^2)/n)^2
sqrt(sum((yy-xx)^2)/n)
write(t(cbind(0:(n-1),1,yy)), file="normal-data.dat",ncol=3)
q()
0.1^2
1/0.1^2
log(1/0.1^2)
q()
xx = scan("matern-sample.dat")
n=length(xx)
yy = rpois(lambda = exp(xx),n=length(xx))
write(t(cbind(0:(n-1),1,yy)), file="poisson-data.dat",ncol=3)
yy = rnorm(mean = xx, sd = 0.1 ,n=length(xx))
write(t(cbind(0:(n-1),1,yy)), file="normal-data.dat",ncol=3)
q()
my.display.matrix(matrix(yy,100,100))
xx = scan("matern-sample.dat")
my.display.matrix(matrix(xx,50,50))
q()
xx = scan("matern-sample.dat")
n=length(xx)
n
yy = rnorm(mean = xx, sd = 0.1 ,n=length(xx))
write(t(cbind(0:(n-1),1,yy)), file="normal-data.dat",ncol=3)
write(t(cbind(0:(n-1),1,xx)), file="normal-data-no-error.dat",ncol=3)
write(t(cbind(0:(n-1),1,yy)), file="poisson-data.dat",ncol=3)
q()
xx = scan("matern-sample.dat")
write(t(cbind(0:(n-1),1,xx)), file="normal-data-no-error.dat",ncol=3)
q()
log(1/2/pi)
log(1/2/pi)*2500
446.801 - 2744.15
446.801 - 2744.15
log(1/2/pi)*2500/2
q()
xx = read.table("hyper.dat")
Krige
Krig
library(fields)
demo(spam)
demo(spam)
q()
library(fields)
xx = read.table("hyper.dat")
Krig
?Krig
?Krig
Krig(x=cbind(xx$V1,xx$V2),Y=xx$V3)
fit = Krig(x=cbind(xx$V1,xx$V2),Y=xx$V3)
plot(fit)
image(fit)
surface(fit)
xx = read.table("hyper.dat")
fit = Krig(x=cbind(xx$V1,xx$V2),Y=xx$V3)
surface(fit)
countour(fit)
?surface
fit
fit$x
fit$y
fit$y = exp(fit$y - max(fit$y))
?surface
countour(fit)
countur(fit)
contour(fit)
surface(fit)
fit
names(fit)
fit$yM
fit$yM = exp(fit$yM - max(fit$yM))
surface(fit)
names(fit)
fit$Z = exp(fit$Z - max(fit$Z))
surface(fit)
fit$ZM = exp(fit$ZM - max(fit$ZM))
surface(fit)
smooth.2d
fit = smooth.2d(x=cbind(xx$V1,xx$V2),Y=xx$V3)
surface(fit)
fit = smooth.2d(x=cbind(xx$V1,xx$V2),Y=exp(xx$V3 - max(xx$V3)))
surface(fit)
?smooth.2d
x = rnorm(100)
y = rnorm(100)
z = dnorm(x)*dnorm(y)
smooth.2d
?smooth.2d
fit = smooth.2d(Y = xx$V3,cbind(xx$V1,xx$V2))
surface(fit)
fit = smooth.2d(Y = xx$V3,x=cbind(xx$V1,xx$V2))
surface(fit)
fit = smooth.2d(Y = z, x = cbind(x,y))
surface(fit)
fit = smooth.2d(Y = xx$V3,x=cbind(xx$V1,xx$V2))
surface(fit)
fit = smooth.2d(Y = exp(xx$V3-max(xx$V3)),x=cbind(xx$V1,xx$V2))
surface(fit)
plot(exp(xx$V3-max(xx$V3)))
plot((xx$V3-max(xx$V3)))
plot(xx$V1,xx$V2)
xx = read.table("hyper.dat")
plot(xx$V1,xx$V2)
fit = smooth.2d(Y = exp(xx$V3-max(xx$V3)),x=cbind(xx$V1,xx$V2))
contour(fit)
fit = Krig(x=cbind(xx$V1,xx$V2),Y=xx$V3)
contour(fit)
surface(fit)
fit = Krig(x=cbind(xx$V1,xx$V2),Y=xx$V3)
surface(fit)
?Krig
surface(fit)
fit = Krig(x=cbind(xx$V1,xx$V2),Y=xx$V3)
surface
a()
q()
contour(fit)
source("runme.R", echo=T)
inla.update9)
inla.update()
source("runme.R", echo=T)
inla.update()
formula = y ~ f(ind, model="matern2d", nrow=50, ncol=50)
d = list(y=y, ind=ind)
res1 = inla(formula, family = "binomial", Ntrials=rep(1,n), verbose =TRUE)
d
length(y)
length(ind)
source("runme.R", echo=T)
names(y)
source("runme.R", echo=T)
source("runme.R", echo=T)
inla.update()
source("runme.R", echo=T)
yy$V3
dim(yy$V3)
length(yy$V3)
length(ind)
length(d$y)
source("runme.R", echo=T)
source("runme.R", echo=T)
source("runme.R", echo=T)
plot(res1)
plot(res1)
my.display.matrix(res1$summary.linear.predictor)
res1$summary.linear.predictor
res1$summary.random
res1$summary.random$ind
res1$summary.random$ind$mean
plot(res1$summary.random$ind$mean)
my.display.matrix(res1$summary.random$ind$mean)
my.display.matrix(res1$summary.random$ind$mean, 50, 50)
my.display.matrix(matrix(res1$summary.random$ind$mean, 50, 50))
 
yy = read.table("binary-data.dat")
ind = yy$V1 + 1
formula = y ~ f(ind, model="matern2d", nrow=50, ncol=50)
d = list(y=yy$V3, ind=ind)
res2 = inla(formula, family = "binomial", Ntrials=yy$V2, data = d, verbose =TRUE,
            control.data = list(initial = 12, fixed= TRUE))
res2 = inla(formula, family = "binomial", Ntrials=yy$V2, data = d, verbose =TRUE)
plot(res2)
my.display.matrix(matrix(res2$summary.random$ind$mean, 50, 50))
surface(matrix(res2$summary.random$ind$mean, 50, 50))
contour(matrix(res2$summary.random$ind$mean, 50, 50))
my.display.matrix(matrix(res2$summary.random$ind$mean, 50, 50))
contour(matrix(res2$summary.random$ind$mean, 50, 50), add=TRUE)
q()
is.element(3, c(1,2,3))
is.element(3.2, c(1,2,3))
nrow = 50
ncol = 50
n = nrow * ncol
## normal data with no errors (no nugget)
##  idx scale y  (zero-based)
yy = read.table("normal-data-no-error.dat")
ind = yy$V1 + 1  
formula = y ~ f(ind, model="matern2d", nrow=50, ncol=50,nu=3)
d = list(y=yy$V3, ind=ind)
res1 = inla(formula, family = "gaussian", scale=yy$V2, data = d, verbose =TRUE,
            control.data = list(initial = 12, fixed= TRUE))
inla.update()
res1 = inla(formula, family = "gaussian", scale=yy$V2, data = d, verbose =TRUE,
            control.data = list(initial = 12, fixed= TRUE))
image( matrix(res1$summary.random$ind$mean,nrow,ncol))
contour( matrix(res1$summary.random$ind$mean,nrow,ncol), add=TRUE)
title("Posterior mean of the latent Matern-field")
source("runme.R", echo=T)
inla.update()
source("runme.R", echo=T)
?contour
q()
